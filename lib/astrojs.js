// Generated by CoffeeScript 1.6.3
(function() {
  var AstroJS, Template, UglifyJS, ansi, argv, cs, fd, fs, help, optimist, spawn, strata,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  fd = require('path');

  spawn = require('child_process').spawn;

  cs = require('coffee-script');

  strata = require('strata');

  optimist = require('optimist');

  UglifyJS = require('uglify-js');

  Template = require('./template');

  ansi = require('./ansi');

  argv = optimist.usage(['  usage: astrojs COMMAND', '    new      create a new astrojs project template', '    class    generate a class template and associated test template', '    server   start a local development server', '    build    build the module (this is an alias for `cake build`)'].join("\n")).alias('p', 'port').alias('m', 'minify').argv;

  help = function() {
    optimist.showHelp();
    return process.exit();
  };

  AstroJS = (function() {
    function AstroJS() {
      this.server = __bind(this.server, this);
    }

    AstroJS.exec = function(command) {
      return (new this).exec(command);
    };

    AstroJS.expandPath = function(path, dir) {
      if (fd.basename(path) === path) {
        path = dir + path;
      }
      return fd.normalize(path);
    };

    AstroJS.camelize = function(str) {
      return str.replace(/-|_+(.)?/g, function(match, chr) {
        if (chr) {
          return chr.toUpperCase();
        } else {
          return "";
        }
      }).replace(/^(.)?/, function(match, chr) {
        if (chr) {
          return chr.toUpperCase();
        } else {
          return "";
        }
      });
    };

    AstroJS.inProjectDirectory = function() {
      var f, files, root, _i, _len;
      files = ['index.js', 'package.json', 'src', 'lib'];
      root = process.cwd();
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        f = files[_i];
        if (!fs.existsSync(fd.join(root, f))) {
          console.log(ansi('\tastrojs must be run from within a project directory', 'red'));
          return false;
        }
      }
      return true;
    };

    AstroJS.getProjectName = function() {
      var metadata, packagePath;
      packagePath = fd.join(process.cwd(), "package");
      metadata = require(packagePath);
      return metadata["name"];
    };

    AstroJS.getDependencies = function() {
      var metadata;
      return metadata = require(packagePath);
    };

    AstroJS.prototype["new"] = function(name) {
      var main, proj, template, values;
      template = __dirname + "/../templates/module";
      values = {
        name: AstroJS.camelize(fd.basename(name))
      };
      name = fd.normalize(name);
      if (fs.existsSync(name)) {
        throw name + " already exists";
      }
      fs.mkdirSync(name, 0x1fd);
      (new Template(template, name, values)).write();
      main = fd.join(name, "src", "main.coffee");
      proj = fd.join(name, "src", values.name + ".coffee");
      return fs.rename(main, proj);
    };

    AstroJS.prototype.klass = function(name) {
      var path, project, template, values;
      template = fd.join(__dirname, '..', 'templates', 'class.coffee');
      project = AstroJS.getProjectName();
      values = {
        name: AstroJS.camelize(fd.basename(name)),
        project: project
      };
      path = fd.join('src', "" + name + ".coffee");
      (new Template(template, path, values)).write();
      return this.klassSpec(project, name);
    };

    AstroJS.prototype.klassSpec = function(project, name) {
      var path, template, values;
      if (!fs.existsSync(fd.join('test', 'specs'))) {
        return;
      }
      template = fd.join(__dirname, '..', 'templates', 'spec.class.coffee');
      values = {
        name: AstroJS.camelize(fd.basename(name)),
        project: project
      };
      path = fd.join('test', 'specs', "" + name + ".coffee");
      return (new Template(template, path, values)).write();
    };

    AstroJS.prototype.server = function() {
      var curdir, minify, name, pkg, port, root,
        _this = this;
      name = AstroJS.getProjectName();
      curdir = process.cwd();
      port = argv['port'] != null ? argv['port'] : 8000;
      minify = argv['minify'] != null ? true : false;
      root = process.cwd();
      pkg = require(fd.join(root, 'package.json'));
      console.log(ansi("Running astrojs 0.1.3", 'yellow'));
      strata.use(strata.commonLogger);
      strata.use(strata.contentType, 'text/html');
      strata.use(strata.contentLength);
      strata.use(strata.file, curdir);
      strata.get('/module.js', function(env, callback) {
        var coffeeSource, currentFile, dep, opts, order, result, source, _i, _len;
        if (pkg['_dependencyOrder'] == null) {
          process.stderr.write("ERROR: The dependency order must be specified in package.json\n");
          return;
        }
        order = pkg['_dependencyOrder'];
        coffeeSource = "";
        for (_i = 0, _len = order.length; _i < _len; _i++) {
          dep = order[_i];
          currentFile = fd.join(root, 'src', "" + dep + ".coffee");
          coffeeSource += fs.readFileSync(currentFile);
          coffeeSource += "\n";
        }
        source = cs.compile(coffeeSource);
        if (minify) {
          opts = {
            fromString: true,
            mangle: true
          };
          result = UglifyJS.minify(source, opts);
          source = result.code;
        }
        return callback(200, {
          "Content-Type": "text/javascript"
        }, source);
      });
      strata.get('/specs.js', function(env, callback) {
        var coffeeSource, currentFile, f, files, source, _i, _len;
        coffeeSource = "";
        files = fs.readdirSync(fd.join('test', 'specs'));
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          f = files[_i];
          if (!f.match(/\.coffee$/i)) {
            continue;
          }
          currentFile = fd.join('test', 'specs', f);
          coffeeSource += fs.readFileSync(currentFile);
        }
        source = cs.compile(coffeeSource);
        return callback(200, {
          "Content-Type": "text/javascript"
        }, source);
      });
      strata.use(strata.file, './test', ['SpecRunner.html']);
      return strata.run({
        port: port
      });
    };

    AstroJS.prototype.build = function() {
      return spawn('cake', ['build']);
    };

    AstroJS.prototype.exec = function(command) {
      var name;
      if (command == null) {
        command = argv._[0];
      }
      name = argv._[1];
      switch (command) {
        case 'new':
          if (!name) {
            help();
          }
          return this['new'](name);
        case 'class':
          if (!name) {
            help();
          }
          return this['klass'](name);
        case 'server':
          return this['server']();
        case 'build':
          return this['build']();
        case 'docs':
          return this['docs']();
        default:
          return help();
      }
    };

    return AstroJS;

  })();

  module.exports = AstroJS;

}).call(this);
