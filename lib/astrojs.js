// Generated by CoffeeScript 1.3.3
(function() {
  var AstroJS, Template, ansi, argv, cs, fd, fs, help, optimist, spawn, stitch, strata;

  fs = require('fs');

  fd = require('path');

  cs = require('coffee-script');

  stitch = require('stitch');

  strata = require('strata');

  optimist = require('optimist');

  spawn = require('child_process').spawn;

  Template = require('./template');

  ansi = require('./ansi');

  argv = optimist.usage(['  usage: astrojs COMMAND', '    new      create a new project template', '    class    generate a class template and associated test template', '    server   start a dynamic development server', '    build    serialize application to disk'].join("\n")).alias('p', 'port').argv;

  help = function() {
    optimist.showHelp();
    return process.exit();
  };

  AstroJS = (function() {

    AstroJS.exec = function(command) {
      return (new this).exec(command);
    };

    AstroJS.expandPath = function(path, dir) {
      if (fd.basename(path) === path) {
        path = dir + path;
      }
      return fd.normalize(path);
    };

    AstroJS.camelize = function(str) {
      return str.replace(/-|_+(.)?/g, function(match, chr) {
        if (chr) {
          return chr.toUpperCase();
        } else {
          return "";
        }
      }).replace(/^(.)?/, function(match, chr) {
        if (chr) {
          return chr.toUpperCase();
        } else {
          return "";
        }
      });
    };

    AstroJS.inProjectDirectory = function() {
      var f, files, root, _i, _len;
      files = ['index.js', 'package.json', 'src', 'lib'];
      root = process.cwd();
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        f = files[_i];
        if (!fd.existsSync(fd.join(root, f))) {
          return false;
        }
      }
      return true;
    };

    AstroJS.getProjectName = function() {
      var metadata, packagePath;
      packagePath = fd.join(process.cwd(), "package");
      metadata = require(packagePath);
      return metadata["name"];
    };

    AstroJS.getDependencies = function() {
      var metadata;
      return metadata = require(packagePath);
    };

    function AstroJS() {}

    AstroJS.prototype["new"] = function(name) {
      var main, proj, template, values;
      template = __dirname + "/../templates/module";
      values = {
        name: AstroJS.camelize(fd.basename(name))
      };
      name = fd.normalize(name);
      if (fd.existsSync(name)) {
        throw name + " already exists";
      }
      fs.mkdirSync(name, 0x1fd);
      (new Template(template, name, values)).write();
      main = fd.join(name, "src", "main.coffee");
      proj = fd.join(name, "src", values.name + ".coffee");
      return fs.rename(main, proj);
    };

    AstroJS.prototype.klass = function(name) {
      var path, project, template, values;
      template = fd.join(__dirname, '..', 'templates', 'class.coffee');
      project = AstroJS.getProjectName();
      values = {
        name: AstroJS.camelize(fd.basename(name)),
        project: project
      };
      path = fd.join('src', "" + name + ".coffee");
      (new Template(template, path, values)).write();
      return this.klassSpec(name);
    };

    AstroJS.prototype.klassSpec = function(name) {
      var path, template, values;
      if (!fd.existsSync(fd.join('test', 'specs'))) {
        return;
      }
      template = fd.join(__dirname, '..', 'templates', 'spec.class.coffee');
      values = {
        name: AstroJS.camelize(fd.basename(name))
      };
      path = fd.join('test', 'specs', "" + name + ".coffee");
      return (new Template(template, path, values)).write();
    };

    AstroJS.prototype.server = function() {
      var curdir, name, port;
      console.log(ansi('\tstarting server', 'green'));
      name = AstroJS.getProjectName();
      curdir = process.cwd();
      port = argv['port'] != null ? argv['port'] : 8000;
      strata.use(strata.commonLogger);
      strata.use(strata.contentType, 'text/html');
      strata.use(strata.contentLength);
      strata.use(strata.file, curdir);
      strata.get('/module.js', function(env, callback) {
        var coffee;
        console.log(ansi('\tbuilding module', 'green'));
        coffee = spawn('coffee', ['-c', '-o', 'lib', 'src']);
        coffee.stderr.on('data', function() {
          return process.stderr.write(data.toString());
        });
        coffee.stdout.on("data", function(data) {
          return console.log(data.toString());
        });
        return coffee.on('exit', function(code) {
          var pkg;
          if (code === 0) {
            pkg = stitch.createPackage({
              paths: [fd.join(curdir, 'lib')]
            });
            return pkg.compile(function(err, source) {
              if (err) {
                throw err;
              }
              return callback(200, {
                'Content-Type': 'text/javascript'
              }, source);
            });
          }
        });
      });
      strata.get('/specs.js', function(env, callback) {
        var coffee;
        console.log(ansi('\tbuilding specs', 'green'));
        coffee = spawn('coffee', ['-c', '-o', 'test/specs', 'test/specs']);
        coffee.stderr.on('data', function(data) {
          return process.stderr.write(data.toString());
        });
        coffee.stdout.on('data', function(data) {
          return console.log(data.toString());
        });
        return coffee.on('exit', function(code) {
          var currentFile, f, files, source, _i, _len;
          if (code === 0) {
            files = fs.readdirSync(fd.join('test', 'specs'));
            source = "";
            for (_i = 0, _len = files.length; _i < _len; _i++) {
              f = files[_i];
              if (f.match(/\.js$/i)) {
                currentFile = fd.join('test', 'specs', f);
                source += fs.readFileSync(currentFile);
              }
            }
            return callback(200, {
              "Content-Type": "text/javascript"
            }, source);
          }
        });
      });
      strata.use(strata.file, './test', ['SpecRunner.html']);
      return strata.run({
        port: port
      });
    };

    AstroJS.prototype.build = function() {
      var coffee, curdir, name;
      name = AstroJS.getProjectName();
      curdir = process.cwd();
      coffee = spawn('coffee', ['-c', '-o', 'lib', 'src']);
      coffee.stderr.on("data", function(data) {
        return process.stderr.write(data.toString());
      });
      coffee.stdout.on('data', function(data) {
        return console.log(data.toString());
      });
      return coffee.on('exit', function(code) {
        var main, pkg, temp;
        if (code === 0) {
          main = fd.join(curdir, 'lib', "" + name + ".js");
          temp = fd.join(curdir, 'lib', "" + name + "_tmp.js");
          pkg = stitch.createPackage({
            paths: [fd.join(curdir, 'lib')]
          });
          return pkg.compile(function(err, source) {
            var libpath;
            libpath = fd.join(curdir, 'lib', "" + name + "_tmp.js");
            return fs.writeFile(libpath, source, function(err) {
              if (err) {
                throw err;
              }
              fs.renameSync(temp, main);
              return console.log(ansi("\tcompiled " + name, 'green'));
            });
          });
        }
      });
    };

    AstroJS.prototype.exec = function(command) {
      var name;
      if (command == null) {
        command = argv._[0];
      }
      name = argv._[1];
      switch (command) {
        case 'new':
          if (!name) {
            help();
          }
          return this['new'](name);
        case 'class':
          if (!name) {
            help();
          }
          return this['klass'](name);
        case 'server':
          return this['server']();
        case 'build':
          return this['build']();
        default:
          return help();
      }
    };

    return AstroJS;

  })();

  module.exports = AstroJS;

}).call(this);
